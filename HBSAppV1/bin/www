#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hbsappv1:server');
var http = require('http');

/**
 * Colors voor socket log
 */

var ColorWHBR = "\x1b[37m\x1b[1m"; //White Bright
var ColorGRBR = "\x1b[32m\x1b[1m"; //Green Bright
var ColorCYBR ="\x1b[36m\x1b[1m"; //Cyan Bright
var ColorYEBR ="\x1b[33m\x1b[1m"; //Yellow Bright
var ColorREBR = "\x1b[31m\x1b[1m"; //Green Bright
var ColorRE ="\x1b[0m"; // color reset

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4200');
app.set('port', port);
console.log('using port:'+ ColorCYBR + port + ColorRE + "\n");

/**
 * Create HTTP server.
 */

var server = http.createServer(app),  io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var PlayerArray = [];


io.sockets.on('connection', function (socket) {
    console.log("user " + ColorGRBR + socket.id + ColorRE + " connected" + "\n");
    socket.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    socket.broadcast.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    PlayerArray.push(new player(socket.id, null));
    socket.on('disconnect', function () {

        console.log("user " + ColorREBR + socket.id + ColorRE + " disconnected" + "\n");
        socket.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
        socket.broadcast.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    });
});

var usernames = {};

var rooms = ['Lobby'];

io.sockets.on('connection', function(socket) {
    socket.on('adduser', function(username) {
        socket.username = username;
        socket.room = 'Lobby';
        usernames[username] = username;
        socket.join('Lobby');
        socket.emit('updatechat', 'SERVER', 'you have connected to Lobby');
        socket.broadcast.to('Lobby').emit('updatechat', 'SERVER', username + ' has connected to this room');
        socket.emit('updaterooms', rooms, 'Lobby');
    });

    socket.on('create', function(room) {
        rooms.push(room);
        socket.emit('updaterooms', rooms, socket.room);
    });

    socket.on('sendchat', function(data) {
        io.sockets["in"](socket.room).emit('updatechat', socket.username, data);
    });

    socket.on('switchRoom', function(newroom) {
        var oldroom;
        oldroom = socket.room;
        socket.leave(socket.room);
        socket.join(newroom);
        socket.emit('updatechat', 'SERVER', 'you have connected to ' + newroom);
        socket.broadcast.to(oldroom).emit('updatechat', 'SERVER', socket.username + ' has left this room');
        socket.room = newroom;
        socket.broadcast.to(newroom).emit('updatechat', 'SERVER', socket.username + ' has joined this room');
        socket.emit('updaterooms', rooms, newroom);
    });

    socket.on('disconnect', function() {
        delete usernames[socket.username];
        io.sockets.emit('updateusers', usernames);
        socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
        socket.leave(socket.room);
    });

    socket.on('joinGame', function(){
        socket.emit('Joined', socket.id, socket.username, socket.room);
    })
});

io.on('connection', function(client) {

    client.on('messages', function(data) {
        client.emit('broad', data);
        client.broadcast.emit('broad',data);
    });

    client.on('choice', function(data) {
        console.log("Amount of players: " + ColorYEBR + io.engine.clientsCount + ColorRE + "\n");
        client.emit('choice', data, client.id);
        client.broadcast.emit('choice',data, client.id);
    });
});
setInterval(heartbeat, 1000);
function heartbeat() {
    io.sockets.emit('heartbeat', 'tick');
}

function player(id,choice){
    this.id = id;
    this.choice = choice;
    this.status = "waiting";
}


