#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hbsappv1:server');
var http = require('http');

/**
 * Colors voor socket log
 */

var ColorWHBR = "\x1b[37m\x1b[1m"; //White Bright
var ColorGRBR = "\x1b[32m\x1b[1m"; //Green Bright
var ColorCYBR ="\x1b[36m\x1b[1m"; //Cyan Bright
var ColorYEBR ="\x1b[33m\x1b[1m"; //Yellow Bright
var ColorREBR = "\x1b[31m\x1b[1m"; //Green Bright
var ColorRE ="\x1b[0m"; // color reset

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4200');
app.set('port', port);
console.log('using port:'+ ColorCYBR + port + ColorRE + "\n");

/**
 * Create HTTP server.
 */

var server = http.createServer(app),  io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var PlayerArray = [];


io.sockets.on('connection', function (socket) {
    console.log("user " + ColorGRBR + socket.id + ColorRE + " connected" + "\n");
    socket.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    socket.broadcast.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    PlayerArray.push(new player(socket.id, null));
    socket.on('disconnect', function () {

        console.log("user " + ColorREBR + socket.id + ColorRE + " disconnected" + "\n");
        socket.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
        socket.broadcast.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    });
});

var usernames = {};
var temp = '';
var temp2 = '';
var toRemove;
var redirect = false;

var rooms = ['Lobby'];


io.sockets.on('connection', function(socket) {

    var client_socket;
    var arrayN = [];// array met namen
    var arrayS = [];// array met statussen van spelers
    var arrayC = [];// array met choices van spelers
    var arrayP = [];// array met aantal punten per speler
    var clients_in_the_room;
    var gameReady = false;


    socket.on('adduser', function(username) {
        if(username != null){
            socket.username = username;
            socket.room = 'Lobby';
            usernames[username] = username;
            socket.join('Lobby');
            socket.emit('updatechat', 'SERVER', 'you have connected to Lobby');
            socket.broadcast.to('Lobby').emit('updatechat', 'SERVER', username + ' has connected to this room');
            socket.emit('updaterooms', rooms, 'Lobby');
        }
    });

    socket.on('create', function(room) {
        if(rooms.indexOf(room) < 0){
            rooms.push(room);
            socket.emit('updaterooms', rooms, socket.room);
            socket.broadcast.emit('updaterooms', rooms, socket.room);
        }else {
            console.log('Room Bestaat al.');
        }
    });

    socket.on('gameStatus', function () {
        var room = io.sockets.adapter.rooms[socket.room];
        var playerCount = room.length;
        var playerChoiceCount = 0;

        for(var s in arrayS){
            if(arrayS[s] == 1){
                playerChoiceCount++;
            }
        }
        if(playerChoiceCount == playerCount){
            gamecheck();
        }

    });
    function gamecheck(){
        var playerIndexArray = [];
        var highest = 0;
        var doublePoints = 1;
        for(var n in arrayN){

            var points = 0;
            for( var c in arrayC){
                if(arrayC[n] == arrayC[c]){
                    points++;
                }else if(arrayC[n]== 1 && arrayC[c] == 2){
                    points+=3;
                }else if(arrayC[n]== 2 && arrayC[c] == 3){
                    points+=3;
                }else if(arrayC[n]== 3 && arrayC[c] == 1){
                    points+=3;
                }
            }
            arrayP[n] = points;
            console.log("De speler: " + arrayN[n] + "heeft " + points + " punten en in de json " + arrayP[n]);
            if(points > highest){
                highest = points;
                doublePoints = 1;
                playerIndexArray = [];
                playerIndexArray.push(n);
            } else if (points == highest){
                doublePoints ++;
                playerIndexArray.push(n);
            }
        }
        if(playerIndexArray.length > 1){
            console.log('Het is een draw');
            socket.nsp.to(socket.room).emit('GameWinner', null);
        }else{
            var index = playerIndexArray[0];
            console.log("Deze speler heeft gewonnen:" + arrayN[index]);
            socket.nsp.to(socket.room).emit('GameWinner', arrayN[index]);
        }
        socket.nsp.to(socket.room).emit('GameData', arrayN, arrayP, arrayC);


    }
    socket.on('users', function () {
        arrayN = [];
        arrayC = [];
        arrayS = [];
        arrayP = [];
        var string = '';
        clients_in_the_room = io.sockets.adapter.rooms[socket.room];
        for (var clientId in clients_in_the_room['sockets'] ) {
            // console.log('client: %s', clientId);
            client_socket = io.sockets.connected[clientId];
            arrayN.push(client_socket['username']);
            arrayS.push(client_socket['status']);
            arrayC.push(client_socket['choice']);
            arrayP.push(client_socket['points']);
        }
        /* dit moet later gedelete worden !*/
        for (var s in arrayN){
            string += "username: " + arrayN[s] + ' status: ' + arrayS[s] +"\n";
        }
        console.log(string);

        socket.nsp.to(socket.room).emit('Players', arrayN, arrayS);

    });
    socket.on('updateUsers', function (status, choice) {
        socket.status = status;
        socket.choice = choice;

    });

    socket.on('gameReadyCheck', function () {
        if(arrayN.length > 1){
            gameReady = true;
            socket.nsp.to(socket.room).emit('GameReady', gameReady);
        }
    });

    socket.on('gameRoomJoin', function (username, room) {

        if (arrayN.indexOf(username) < 0){
            console.log(arrayN.indexOf(username));
            console.log(arrayN[0]);
        }else{
            console.log('say hi')
        }
        socket.username = username;
        socket.room = room;
        socket.status = 0;
        socket.points = 0;
        usernames[username] = username;
        socket.join(room);
        socket.broadcast.to(room).emit('updateRoom');

    })

    socket.on('sendchat', function(data) {
        io.sockets["in"](socket.room).emit('updatechat', socket.username, data);
    });

    socket.on('switchRoom', function(newroom) {
        var oldroom;
        oldroom = socket.room;
        socket.leave(socket.room);
        socket.join(newroom);
        socket.emit('updatechat', 'SERVER', 'you have connected to ' + newroom);
        socket.broadcast.to(oldroom).emit('updatechat', 'SERVER', socket.username + ' has left this room');
        socket.room = newroom;
        socket.broadcast.to(newroom).emit('updatechat', 'SERVER', socket.username + ' has joined this room');
        socket.emit('updaterooms', rooms, newroom);
    });

    socket.on('disconnect', function() {
        var room = '';
        var index = arrayN.indexOf(socket.username);
        console.log(index);
        if(index>0){
            arrayN.splice(index, 1);
        }
        console.log(arrayN.indexOf(socket.username));
        console.log('================================================================================================================================================================');

        if(socket.username != null){
            if (socket.room != null){
                room = socket.room
                console.log(room);
            }
            delete usernames[socket.username];
            io.sockets.emit('updateusers', usernames);
            socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
            socket.leave(socket.room);
            console.log(arrayN.length);

            if(arrayN.length < 2){
                gameReady = false;
                socket.nsp.to(room).emit('GameReady', gameReady);
                console.log('game is niet ready');
            }
        }
    });

    socket.on('joinGame', function(){
        socket.emit('Joined', socket.id, socket.username, socket.room);
    })
});

io.on('connection', function(client) {

    client.on('messages', function(data) {
        client.emit('broad', data);
        client.broadcast.emit('broad',data);
    });

    client.on('choice', function(data) {
        console.log("Amount of players: " + ColorYEBR + io.engine.clientsCount + ColorRE + "\n");
        client.emit('choice', data, client.id);
        client.nsp.emit('choice',data, client.id);
    });
});
setInterval(heartbeat, 1000);
function heartbeat() {
    io.sockets.emit('heartbeat', 'tick');
}

function player(id,choice){
    this.id = id;
    this.choice = choice;
    this.status = "waiting";
}

function getRoomUsers(roomName) {
    var room = io.sockets.adapter.rooms[roomName];
    var string;
    for (var u in room){
        string += u + " " + room[u] + "\n";
    }
    return string;
}

function findClientsSocket(roomId, namespace) {
    var res = []
        // the default namespace is "/"
        , ns = io.of(namespace ||"/");
    var string;

    if (ns) {
        for (var id in ns.connected) {
            if(roomId) {
                var index = ns.connected[id].rooms.indexOf(roomId);
                if(index !== -1) {
                    res.push(ns.connected[id]);
                }
            } else {
                res.push(ns.connected[id]);
            }
        }
    }

    for(var s in res){
        string += s + " " + res[s] + "\n";
    }
    return string;
}


