#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hbsappv1:server');
var http = require('http');

/**
 * Colors voor socket log
 */

var ColorWHBR = "\x1b[37m\x1b[1m"; //White Bright
var ColorGRBR = "\x1b[32m\x1b[1m"; //Green Bright
var ColorCYBR ="\x1b[36m\x1b[1m"; //Cyan Bright
var ColorYEBR ="\x1b[33m\x1b[1m"; //Yellow Bright
var ColorREBR = "\x1b[31m\x1b[1m"; //Green Bright
var ColorRE ="\x1b[0m"; // color reset

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4200');
app.set('port', port);
console.log('using port:'+ ColorCYBR + port + ColorRE + "\n");

/**
 * Create HTTP server.
 */

var server = http.createServer(app),  io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var PlayerArray = [];
var RoomArray = [];
var JSONRooms = '[]';
var Index = '';
var NameArray = [];
var Names = '';
var UserArray = [];
var UserID = [];

// Rooms en dummyRoom zijn test variabelen

var Rooms = "";
var DummyRoom = "";


io.sockets.on('connection', function (socket) {
    console.log("user " + ColorGRBR + socket.id + ColorRE + " connected" + "\n");
    socket.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    socket.broadcast.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    PlayerArray.push(new player(socket.id, null));
    socket.on('disconnect', function () {

        console.log("user " + ColorREBR + socket.id + ColorRE + " disconnected" + "\n");
        socket.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
        socket.broadcast.emit('UpdateAmountOfPlayers', io.engine.clientsCount);
    });

    socket.on('Room', function (room, name) {

        RoomArray = JSON.parse(JSONRooms);
        Index = RoomArray.map(function (r) {
            return r['roomName'];
        }).indexOf(room);
        console.log(Index + "\n");
        if (Index < 0) {
            NameArray = [];
            NameArray.push({"Username" : name, "UserID" : socket.id});
            RoomArray.push({"roomName" : room , "Users" : NameArray});
            console.log(RoomArray[0].Users[0].Username + '\n');
            // getNames(room);
            // console.log(ColorCYBR + Names + ColorRE + 'hello');
            JSONRooms = JSON.stringify(RoomArray);
            console.log(JSONRooms + "\n" + ColorYEBR + "JSON array geprint!" + ColorRE);
        }
        else{
            UserArray = NamesArray(Index, RoomArray);
            UserID = UserIDArray(Index, RoomArray);
            if(UserID.indexOf(socket.id)<0){
                if(UserArray.indexOf(name)<0){
                    addNames(Index, name);
                    getNames(Index);
                    console.log(ColorCYBR + Names + ColorRE + 'hello');
                    // console.log(ColorGRBR + NamesArray(Index, RoomArray) + ColorRE);
                    JSONRooms = JSON.stringify(RoomArray);
                }else{
                    console.log(ColorREBR + "Username already in use!" + ColorRE);
                }
            }
            else{
                console.log(ColorREBR + "you already have a name!" + ColorRE);
            }
        }
        socket.join(room);
        console.log("User " + ColorWHBR + socket.id + ColorRE + " joined room: " + ColorGRBR + room + ColorRE + "\n");
    });
})


io.sockets.on('connection', function (socket) {
    socket.on('Call', function (room) {
    if (RoomArray.indexOf(room) >=0){
        io.sockets.in(room).emit('message', 'Hello and welcome to room: ' + Rooms);
    }else{
        console.log('no room selected')
    }

        io.sockets.in(DummyRoom).emit('message', 'anyone in this room yet?' + "\n");
        console.log('messages send' + "\n");
    });

});

io.on('connection', function(client) {

    client.on('messages', function(data) {
        client.emit('broad', data);
        client.broadcast.emit('broad',data);
    });

    client.on('choice', function(data) {
        console.log("Amount of players: " + ColorYEBR + io.engine.clientsCount + ColorRE + "\n");
        client.emit('choice', data, client.id);
        client.broadcast.emit('choice',data, client.id);
    });
});

function player(id,choice){
    this.id = id;
    this.choice = choice;
    this.status = "waiting";
}

var i,j,x = "";

function getNames(index) {
    Names = "";
    for (i in RoomArray[index].Users){
        Names += '{"Username" : ' + RoomArray[index].Users[i].Username + '}' ;
    }
}

function NamesArray(index, rArray){
    var testNames = "";
    // var test = "";
    var TestArray = [];
    for(j in rArray[index].Users){
        test = rArray[index].Users[j].Username;
        TestArray.push(test);
    }
    // for(x in TestArray){
    //     testNames += TestArray[x] + "\n";
    // }
    // return testNames;
    return TestArray;
}
function UserIDArray(index, rArray) {
    var IDArray = [];
    for(x in rArray[index].Users){
        ID = rArray[index].Users[x].UserID;
        IDArray.push(ID);
    }
    return IDArray;
}

function addNames(index, name) {
    console.log('{"Username" : ' + name + '}');
    RoomArray[index].Users.push({"Username" : name});
}